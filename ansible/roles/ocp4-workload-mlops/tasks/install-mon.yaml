---
- name: create project
  k8s:
    state: present
    kind: Project
    api_version: project.openshift.io/v1
    definition:
      metadata:
        name: "{{item}}"
        annotations:
          openshift.io/description: ""
          openshift.io/display-name: "Lab Infrastructure"
        labels:
          prometheus.io/scrape: "true"
  loop:
    - labs-grafana
    - labs-prometheus

- name: Create grafana instance
  k8s:
    state: present    
    definition: "{{ lookup('file', './files/grafana_kfdef.yaml' ) | from_yaml }}"

- name: Wait for grafana operator to be ready
  include_tasks: wait-operator-running.yaml
  vars:
    operator_ns: labs-grafana
    operators_to_wait:
      - key: name
        value: grafana-operator
    crds_to_wait:
      - grafanadashboards.integreatly.org                           
      - grafanadatasources.integreatly.org                          
      - grafanas.integreatly.org    

# Deploy Prometheus operator
- name: Create operator subscription for Prometheus
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - prom_operatorgroup.yaml
  - prom_subscription.yaml

- name: Wait for prometheus operator to be ready
  include_tasks: wait-operator-running.yaml
  vars:
    operator_ns: labs-prometheus
    operators_to_wait:
      - key: app.kubernetes.io/name
        value: prometheus-operator  
    crds_to_wait:
      - prometheuses.monitoring.coreos.com                      
      - prometheusrules.monitoring.coreos.com

- name: Get prometheus operator group info
  k8s_info:
    api_version: operators.coreos.com/v1
    kind: OperatorGroup
    name: labs-prometheus-operator-group
    namespace: labs-prometheus
  register: check_namespace
  
- name: Wait for prometheus operator group to appear
  k8s_info:
    api_version: operators.coreos.com/v1
    kind: OperatorGroup
    name: labs-prometheus-operator-group
    namespace: labs-prometheus
  register: result
  until: result | json_query("resources[0].status.namespaces") | length == 1
  when: not (check_namespace | json_query("resources[0].spec.selector")) # Allows reentrant
  retries: 400
  delay: 2

- name: Patch operator group to watch ns that are labeled
  k8s:
    merge_type: merge    
    definition:
      apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: labs-prometheus-operator-group
        namespace: labs-prometheus
      spec:
        selector:
          matchLabels:
            prometheus.io/scrape: 'true'
        targetNamespaces:

- name: Patch csv with MultiNamespace
  k8s:
    merge_type: merge    
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      metadata:
        name: prometheusoperator.0.47.0
        namespace: labs-prometheus
      spec:
        installModes:
          - supported: true
            type: OwnNamespace
          - supported: true
            type: SingleNamespace
          - supported: true
            type: MultiNamespace
          - supported: false
            type: AllNamespaces

- name: Create Prometheus CR
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
    - prom_cr.yaml

- name: Create Prometheus route
  k8s:
    definition:
      kind: Route
      apiVersion: route.openshift.io/v1
      metadata:
        name: prometheus-portal
        namespace: labs-prometheus
      spec:
        to:
          kind: Service
          name: prometheus-operated
        port:
          targetPort: web
