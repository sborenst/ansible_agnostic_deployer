# create project
- name: check if sonarqube project {{ sonarqube_project_name }} exists
  shell: "{{ openshift_cli }} project {{ sonarqube_project_name }}"
  register: sonarqube_project_result
  ignore_errors: true
  changed_when: false

- name: Setting host facts using complex arguments
  set_fact:
    sonarqube_project_fact: "{{ sonarqube_project_result.stdout }}"

- name: create sonarqube project {{ sonarqube_project_name }}
  shell: "{{ openshift_cli }} new-project {{ sonarqube_project_name }} --display-name='{{ sonarqube_project_display_name }}' --description='{{ sonarqube_project_desc }}'"
  when: sonarqube_project_fact == ""

# install sonarqube
- name: check if sonarqube exists
  shell: "{{ openshift_cli }} get service {{ sonarqube_service_name }} -n {{ sonarqube_project_name }}"
  register: install_sonarqube
  ignore_errors: true
  changed_when: false

- name: Setting sonarqube is installed fact
  set_fact:
    install_sonarqube_fact: "{{ install_sonarqube.stdout }}"
  

- name: deploy sonarqube from template (persistent)
  shell: |
    {{ openshift_cli }} new-app -fhttps://raw.githubusercontent.com/tosin2013/sonarqube-openshift-docker/master/sonarqube-postgresql-template.yaml \
        --param=SONARQUBE_VERSION={{sonarqube_version}} \
        -n {{ sonarqube_project_name }}
  when: not ephemeral|bool

- name: deploy sonarqube from template (ephemeral)
  shell: |
    {{ openshift_cli }} new-app -f https://raw.githubusercontent.com/tosin2013/sonarqube-openshift-docker/master/sonarqube-template.yaml \
        --param=SONARQUBE_VERSION={{sonarqube_version}} \
        -n {{ sonarqube_project_name }}
  when: ephemeral|bool

- name: wait for sonarqube  to be running
  uri:
    url: http://sonarqube-sonarqube.{{ocp_apps_domain}}
    status_code: 200
  register: result
  until: result.status == 200
  retries: "{{ sonarqube_deploy_retry_count }}"
  delay: "{{ sonarqube_deploy_retry_delay }}"