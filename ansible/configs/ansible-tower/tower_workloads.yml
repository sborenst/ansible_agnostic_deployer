---
- name: Install workloads
  hosts: bastions
  gather_facts: false
  run_once: true
  become: true
  tasks:
  - set_fact:
      tower_hostname: "{{ item | first }}"
    tags:
      - default_workloads
      - infra_workloads
    loop:
      - "{{ query('inventory_hostnames', 'towers') }}"

  - name: Install tower-default workloads
    when:
    - default_workloads | d("") | length > 0
    tags:
    - default_workloads
    block:
    - name: Install tower-default-workloads
      when:
      - default_workloads | d("") | length >0
      block:
      - name: Deploy tower-default workloads
        tags:
          - default_workloads
        include_role:
          name: "{{ workload_loop_var }}"
        vars:
          tower_username: "admin"
        loop: "{{ default_workloads }}"
        loop_control:
          loop_var: workload_loop_var

  - name: Install tower-infra workloads
    when:
    - infra_workloads | d("") | length > 0
    tags:
    - infra_workloads
    block:
    - name: Install tower-infra-workloads
      when:
      - infra_workloads | d("") | length >0
      block:
      - name: Deploy tower-infra workloads
        include_role:
          name: "{{ workload_loop_var }}"
        vars:
          tower_username: "admin"
        loop: "{{ infra_workloads }}"
        loop_control:
          loop_var: workload_loop_var


- name: Install dynamic workloads
  hosts: all
  gather_facts: false
  tags:
    - dynamic_workloads
  tasks:
    - name: Process workloads
      loop: "{{ ansible_tower_dynamic_workloads | default([]) }}"
      loop_control:
        loop_var: _workload
        label: "{{ _workload.name }}"
      include_role:
        name: "{{ _workload.name }}"
        defaults_from: "{{ _workload.defaults_from | default('main') }}"
        handlers_from: "{{ _workload.defaults_from | default('main') }}"
        tasks_from: "{{ _workload.tasks_from | default('main') }}"
        vars_from: "{{ _workload.vars_from | default('main') }}"
      when: >-
        _workload.group | default('') in group_names )
        or
        _workload.groups | default([]) | intersect(group_names) | list | length > 0
